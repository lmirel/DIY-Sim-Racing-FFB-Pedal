# This is the name of the workflow, visible on GitHub UI.
name: Get_Python_String_Build_Task

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ develop ] 
  #pull_request:
  #  branches: [ main ] 

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.
jobs:
  Build-date:
    runs-on: ubuntu-latest
    outputs:
      Version_date: ${{ steps.output_version_date.outputs.Version_date }}
      Upload_URL: ${{ steps.create-new-PreRelease.outputs.upload_url }}
    steps:

      # Check out the repository to the GitHub Actions runner
      - name: Check out repository
        uses: actions/checkout@v3
        
      # get date
      - name: Dynamically set MY_DATE environment variable
        run: echo "MY_DATE=$(date +'%Y%m%d.%H%M%S')" >> "$GITHUB_ENV"
      - name: Test MY_DATE variable
        run: echo ${{ env.MY_DATE }}
      - name: output_version_date
        id: output_version_date
        run: echo "Version_date=Develop_Package_v${{ env.MY_DATE }}" >> "$GITHUB_OUTPUT"



      # identify version string with python script
      # Set up Python (if not already set up in your workflow)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Set the version of Python you want to use

      # Install any required dependencies for the Python script (if needed)
      - name: Install dependencies
        run: |
          pip install requests
          pip install regex

      # Run the Python script
      - name: Run Python Script
        run: |
          python Helper/obtainVersionString.py  # Path to your Python script



          

      
